"""
This type stub file was generated by pyright.
"""

import io
from typing import Callable, Dict, List, Union
from . import files
from .files import File, ObjectReader

reSplit = ...

class Environment:
    files: dict
    cabs: dict
    path: str
    def __init__(self, *args) -> None: ...
    def load_files(self, files: List[str]):  # -> None:
        """Loads all files (list) into the Environment and merges .split files for common usage."""
        ...
    def load_folder(self, path: str):  # -> None:
        """Loads all files in the given path and its subdirs into the Environment."""
        ...
    def load(self, files: list):  # -> None:
        """Loads all files into the Environment."""
        ...
    def load_file(
        self,
        file: Union[io.IOBase, str],
        parent: Union[Environment, File] = ...,
        name: str = ...,
    ): ...
    def load_zip_file(self, value): ...
    def save(self, pack=...):  # -> None:
        """Saves all changed assets.
        Mark assets as changed using `.mark_changed()`.
        pack = "none" (default) or "lz4"
        """
        ...
    @property
    def objects(self) -> List[ObjectReader]:
        """Returns a list of all objects in the Environment."""
        ...
    @property
    def container(self) -> Dict[str, ObjectReader]:
        """Returns a dictionary of all objects in the Environment."""
        ...
    @property
    def assets(self) -> list:
        """
        Lists all assets / SerializedFiles within this environment.
        """
        ...
    def get(self, key: str, default=...): ...
    def register_cab(self, name: str, item: File) -> None:
        """
        Registers a cab file.

        Parameters
        ----------
        name : str
            The name of the cab file.
        item : File
            The file to register.
        """
        ...
    def get_cab(self, name: str) -> File:
        """
        Returns the cab file with the given name.

        Parameters
        ----------
        name : str
            The name of the cab file.

        Returns
        -------
        File
            The cab file.
        """
        ...
    def load_assets(
        self, assets: List[str], open_f: Callable[[str], io.IOBase]
    ):  # -> None:
        """
        Load all assets from a list of files via the given open_f function.

        Parameters
        ----------
        assets : List[str]
            List of files to load.
        open_f : Callable[[str], io.IOBase]
            Function to open the files.
            The function takes a file path and returns an io.IOBase object.
        """
        ...
