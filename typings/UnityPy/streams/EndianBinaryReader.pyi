"""
This type stub file was generated by pyright.
"""

import io
from typing import List, Union
from io import BytesIO
from ..math import Color, Matrix4x4, Quaternion, Rectangle, Vector2, Vector3, Vector4

reNot0 = ...
SYS_ENDIAN = ...
TYPE_PARAM_SIZE_LIST = ...
LOCALS = ...

class EndianBinaryReader:
    endian: str
    Length: int
    Position: int
    BaseOffset: int
    def __new__(
        cls,
        item: Union[bytes, bytearray, memoryview, BytesIO, str],
        endian: str = ...,
        offset: int = ...,
    ): ...
    def __init__(self, item, endian=..., offset=...) -> None: ...
    @property
    def bytes(self): ...
    def read(self, *args): ...
    def read_byte(self) -> int: ...
    def read_u_byte(self) -> int: ...
    def read_bytes(self, num) -> bytes: ...
    def read_short(self) -> int: ...
    def read_int(self) -> int: ...
    def read_long(self) -> int: ...
    def read_u_short(self) -> int: ...
    def read_u_int(self) -> int: ...
    def read_u_long(self) -> int: ...
    def read_float(self) -> float: ...
    def read_double(self) -> float: ...
    def read_boolean(self) -> bool: ...
    def read_string(self, size=..., encoding=...) -> str: ...
    def read_string_to_null(self, max_length=...) -> str: ...
    def read_aligned_string(self) -> str: ...
    def align_stream(self, alignment=...): ...
    def read_quaternion(self) -> Quaternion: ...
    def read_vector2(self) -> Vector2: ...
    def read_vector3(self) -> Vector3: ...
    def read_vector4(self) -> Vector4: ...
    def read_rectangle_f(self) -> Rectangle: ...
    def read_color4(self) -> Color: ...
    def read_byte_array(self) -> bytes: ...
    def read_matrix(self) -> Matrix4x4: ...
    def read_array(self, command, length: int) -> list: ...
    def read_array_struct(self, param: str, length: int = ...) -> list: ...
    def read_boolean_array(self, length: int = ...) -> List[bool]: ...
    def read_u_short_array(self, length: int = ...) -> List[int]: ...
    def read_short_array(self, length: int = ...) -> List[int]: ...
    def read_int_array(self, length: int = ...) -> List[int]: ...
    def read_u_int_array(self, length: int = ...) -> List[int]: ...
    def read_u_int_array_array(self, length: int = ...) -> List[List[int]]: ...
    def read_float_array(self, length: int = ...) -> List[float]: ...
    def read_string_array(self) -> List[str]: ...
    def read_vector2_array(self) -> List[Vector2]: ...
    def read_vector4_array(self) -> List[Vector4]: ...
    def read_matrix_array(self) -> List[Matrix4x4]: ...
    def real_offset(self) -> int:
        """Returns offset in the underlying file.
        (Not working with unpacked streams.)
        """
        ...
    def read_the_rest(self, obj_start: int, obj_size: int) -> bytes:
        """Returns the rest of the current reader bytes."""
        ...

class EndianBinaryReader_Memoryview(EndianBinaryReader):
    __slots__ = ...
    view: memoryview
    def __init__(self, view, endian=..., offset=...) -> None: ...
    @property
    def endian(self): ...
    @endian.setter
    def endian(self, value: str): ...
    @property
    def bytes(self): ...
    def dispose(self): ...
    def read(self, length: int): ...
    def read_aligned_string(self): ...
    def read_string_to_null(self, max_length=...) -> str: ...

class EndianBinaryReader_Memoryview_LittleEndian(EndianBinaryReader_Memoryview):
    def read_u_short(self): ...
    def read_short(self): ...
    def read_int(self): ...
    def read_u_int(self): ...
    def read_long(self): ...
    def read_u_long(self): ...
    def read_half(self): ...
    def read_float(self): ...
    def read_double(self): ...
    def read_vector2(self): ...
    def read_vector3(self): ...
    def read_vector4(self): ...

class EndianBinaryReader_Memoryview_BigEndian(EndianBinaryReader_Memoryview):
    def read_u_short(self): ...
    def read_short(self): ...
    def read_int(self): ...
    def read_u_int(self): ...
    def read_long(self): ...
    def read_u_long(self): ...
    def read_half(self): ...
    def read_float(self): ...
    def read_double(self): ...
    def read_vector2(self): ...
    def read_vector3(self): ...
    def read_vector4(self): ...

class EndianBinaryReader_Streamable(EndianBinaryReader):
    __slots__ = ...
    stream: io.BufferedReader
    def __init__(self, stream, endian=..., offset=...) -> None: ...
    def get_position(self): ...
    def set_position(self, value): ...
    @property
    def endian(self): ...
    @endian.setter
    def endian(self, value): ...
    @property
    def Length(self): ...

    Position = ...
    @property
    def bytes(self): ...
    def dispose(self): ...

class EndianBinaryReader_Streamable_LittleEndian(EndianBinaryReader_Streamable):
    def read_u_short(self): ...
    def read_short(self): ...
    def read_int(self): ...
    def read_u_int(self): ...
    def read_long(self): ...
    def read_u_long(self): ...
    def read_half(self): ...
    def read_float(self): ...
    def read_double(self): ...
    def read_vector2(self): ...
    def read_vector3(self): ...
    def read_vector4(self): ...

class EndianBinaryReader_Streamable_BigEndian(EndianBinaryReader_Streamable):
    def read_u_short(self): ...
    def read_short(self): ...
    def read_int(self): ...
    def read_u_int(self): ...
    def read_long(self): ...
    def read_u_long(self): ...
    def read_half(self): ...
    def read_float(self): ...
    def read_double(self): ...
    def read_vector2(self): ...
    def read_vector3(self): ...
    def read_vector4(self): ...
