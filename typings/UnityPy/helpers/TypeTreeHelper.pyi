"""
This type stub file was generated by pyright.
"""

from typing import Any, Iterable, List, Tuple, Union
from ..streams import EndianBinaryReader, EndianBinaryWriter
from ctypes import c_uint32

kAlignBytes = ...

class TypeTreeNode:
    __slots__ = ...
    m_Type: str
    m_Name: str
    m_ByteSize: int
    m_Index: int
    m_Version: int
    m_MetaFlag: int
    m_Level: int
    m_TypeStrOffset: int
    m_NameStrOffset: int
    m_RefTypeHash: str
    m_TypeFlags: int
    m_VariableCount: int
    def __init__(self, data: Union[dict, Iterable[Tuple]] = ..., **kwargs) -> None: ...
    def __repr__(self): ...

def node_dict_to_node_cls(nodes: List[dict]) -> List[TypeTreeNode]:
    """Converts all dict-type nodes into TypeTreeNodes

    Parameters
    ----------
    nodes : List[dict]
        nodes/nodes of the typetree as dict

    Returns
    -------
    List[TypeTreeNode]
        a list of TypeTreeNode-type nodes
    """
    ...

def check_nodes(nodes: List[Union[dict, TypeTreeNode]]) -> List[TypeTreeNode]:
    """Checks the type of the nodes and converts them if necessary.

    Parameters
    ----------
    nodes : List[Union[dict, TypeTreeNode]]
        nodes/nodes of the typetree as dict or TypeTreeNode

    Returns
    -------
    List[TypeTreeNode]
        a list of TypeTreeNode-type nodes
    """
    ...

def get_nodes(nodes: List[TypeTreeNode], index: int) -> list:
    """Copies all nodes above the level of the node at the set index.

    Parameters
    ----------
    nodes : list
        nodes/nodes of the typetree
    index : int
        index of the node

    Returns
    -------
    list
        A list of nodes
    """
    ...

def read_typetree(
    nodes: List[Union[dict, TypeTreeNode]], reader: EndianBinaryReader
) -> dict:
    """Reads the typetree of the object contained in the reader via the node list.

    Parameters
    ----------
    nodes : list
        List of nodes/nodes
    reader : EndianBinaryReader
        Reader of the object to be parsed

    Returns
    -------
    dict
        The parsed typtree
    """
    ...

def read_value(nodes: List[TypeTreeNode], reader: EndianBinaryReader, i: c_uint32): ...
def read_typetree_str(
    sb: List[str], nodes: List[Union[dict, TypeTreeNode]], reader: EndianBinaryReader
) -> list:
    """Reads the typetree of the object contained in the reader via the node list and dumps it as string.

    Parameters
    ----------
    sb : list
        StringBuilder - a list used to build the string dump, should be empty
    nodes : list
        List of nodes/nodes
    reader : EndianBinaryReader
        Reader of the object to be parsed

    Returns
    -------
    list
        The sb given as input
    """
    ...

def read_value_str(
    sb: List[str], nodes: List[TypeTreeNode], reader: EndianBinaryReader, i: c_uint32
) -> list: ...
def dump_typetree(nodes: List[TypeTreeNode]) -> str:
    """Dumps the structure of the given nodes.

    Parameters
    ----------
    nodes : list
        List of nodes/nodes

    Returns
    -------
    str
        The dumped structure
    """
    ...

def write_typetree(
    obj: dict, nodes: List[Union[dict, TypeTreeNode]], writer: EndianBinaryWriter = ...
) -> EndianBinaryWriter:
    """Writes the data of the object via the given typetree of the object into the writer.

    Parameters
    ----------
    obj : dict
        Object to be saved
    nodes : list
        List of nodes/nodes
    writer : EndianBinaryWriter
        Writer of the object to be saved

    Returns
    -------
    EndianBinaryWriter
        The writer that was used to save the data of the given object.
    """
    ...

def write_value(
    value: Any, nodes: List[TypeTreeNode], writer: EndianBinaryWriter, i: c_uint32
): ...
